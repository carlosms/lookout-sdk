/*
 * Copyright 2018 source{d}. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package pb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "lookout/sdk/event.proto";

option (gogoproto.goproto_getters_all) = false;

// Analyzer service should be implemented by analyzers to receive events from
// the server. It is currently implemented as a single long-lived request, so
// cancellation is managed at gRPC level. Depending on how we plan to implement
// the server, we might want to implement sending results as a callback. For
// now, this is kept simple.
service Analyzer {
    // NotifyReviewEvent returns comments for a ReviewEvent.
    rpc NotifyReviewEvent (ReviewEvent) returns (EventResponse);
    // NotifyPushEvent is not expected to return any comments. Its purpose for
    // now is to notify the analyzer of a new push to a repository, that could
    // be used to trigger training tasks over new contents.
    rpc NotifyPushEvent (PushEvent) returns (EventResponse);
}

// EventResponse contains the results of a Review or Push event.
message EventResponse {
    // AnalyzerVersion must be set to the current analyzer version. Used for
    // logging.
    string analyzer_version = 1;
    // Comments to post as the analysis result.
    repeated Comment comments = 2;
    // repeated Patch patches = 3;
}

// Comment is a comment on a commit or changeset.
message Comment {
    // File this comment belongs to. If empty, it is a global comment.
    string file = 1;
    // Line this comment refers to. If 0 (and file is set), it is a
    // file-level comment. Line is expressed aqs a 1-based index.
    int32 line = 2;
    // Text of the comment.
    string text = 3;
    // Confidence in the comment. It should be an integer between 0 and 100.
    uint32 confidence = 4;
}
